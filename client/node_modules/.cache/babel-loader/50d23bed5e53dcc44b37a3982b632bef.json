{"ast":null,"code":"var _jsxFileName = \"/Users/wang/Postmaker/client/src/Auto/Auto.js\";\nimport React, { Component } from 'react';\nimport Spinner from './Spinner';\nimport Images from './Images';\nimport Buttons from './Buttons';\nimport WakeUp from './WakeUp';\nimport { API_URL } from './config';\nimport './Auto.css';\nimport Recognize from './Recognize';\nexport default class Auto extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      uploading: false,\n      images: []\n    };\n\n    this.onChange = e => {\n      const errs = [];\n      const files = Array.from(e.target.files);\n      const formData = new FormData();\n      files.forEach((file, i) => {\n        formData.append(i, file);\n      });\n      this.setState({\n        uploading: true\n      });\n      fetch(`${API_URL}/image-upload`, {\n        method: 'POST',\n        body: formData\n      }).then(res => {\n        if (!res.ok) {\n          throw res;\n        }\n\n        return res.json();\n      }).then(images => {\n        this.setState({\n          uploading: false,\n          images\n        });\n      }).catch(err => {\n        err.json().then(e => {\n          this.setState({\n            uploading: false\n          });\n        });\n      });\n    };\n\n    this.filter = id => {\n      return this.state.images.filter(image => image.public_id !== id);\n    };\n\n    this.removeImage = id => {\n      this.setState({\n        images: this.filter(id)\n      });\n    };\n\n    this.onError = id => {\n      this.setState({\n        images: this.filter(id)\n      });\n    };\n  }\n\n  render() {\n    const {\n      uploading,\n      images\n    } = this.state;\n\n    const content = () => {\n      switch (true) {\n        case uploading:\n          return /*#__PURE__*/React.createElement(Spinner, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 18\n            }\n          });\n\n        case images.length > 0:\n          return /*#__PURE__*/React.createElement(Images, {\n            images: images,\n            removeImage: this.removeImage,\n            onError: this.onError,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 19\n            }\n          });\n\n        default:\n          return /*#__PURE__*/React.createElement(Buttons, {\n            onChange: this.onChange,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 18\n            }\n          });\n      }\n    };\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"buttons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }\n    }, content()));\n  }\n\n}","map":{"version":3,"sources":["/Users/wang/Postmaker/client/src/Auto/Auto.js"],"names":["React","Component","Spinner","Images","Buttons","WakeUp","API_URL","Recognize","Auto","state","uploading","images","onChange","e","errs","files","Array","from","target","formData","FormData","forEach","file","i","append","setState","fetch","method","body","then","res","ok","json","catch","err","filter","id","image","public_id","removeImage","onError","render","content","length"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Spinner from './Spinner'\nimport Images from './Images'\nimport Buttons from './Buttons'\nimport WakeUp from './WakeUp'\nimport { API_URL } from './config'\nimport './Auto.css'\nimport Recognize from './Recognize'\n\nexport default class Auto extends Component {\n  \n  state = {\n    uploading: false,\n    images: []\n  }\n\n  onChange = e => {\n    const errs = [] \n    const files = Array.from(e.target.files)\n  \n    const formData = new FormData()\n\n    files.forEach((file, i) => {\n      formData.append(i, file)\n    })\n\n    this.setState({ uploading: true })\n\n    fetch(`${API_URL}/image-upload`, {\n      method: 'POST',\n      body: formData\n    })\n    .then(res => {\n      if (!res.ok) {\n        throw res\n      }\n      return res.json()\n    })\n    .then(images => {\n      this.setState({\n        uploading: false, \n        images\n      })\n    })\n    .catch(err => {\n      err.json().then(e => {\n        this.setState({ uploading: false })\n      })\n    })\n  }\n\n  filter = id => {\n    return this.state.images.filter(image => image.public_id !== id)\n  }\n\n  removeImage = id => {\n    this.setState({ images: this.filter(id) })\n  }\n\n  onError = id => {\n    this.setState({ images: this.filter(id) })\n  }\n  \n  render() {\n    const {uploading, images } = this.state\n    \n    const content = () => {\n      switch(true) {\n        case uploading:\n          return <Spinner/>\n        case images.length > 0:\n          return (<Images \n                  images={images} \n                  removeImage={this.removeImage} \n                  onError={this.onError}\n                 />)\n        default:\n          return <Buttons onChange={this.onChange} />\n      }\n    }\n\n    return (\n      <div className='container'>\n        <div className='buttons'>\n          {content()}\n        </div>\n      </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}